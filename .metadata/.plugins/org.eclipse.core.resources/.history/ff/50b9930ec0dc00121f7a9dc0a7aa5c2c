/*
 * main.c
 */
#include  <intrinsics.h>
#include "cc430x513x.h"


#include "pmm.h"
#include "ports.h"
#include "ucs.h"
 #include "rf1a.h"
 #include "signal.h"

const unsigned char RF1A_REGISTER_CONFIG[CONF_REG_SIZE]=
{
  SMARTRF_SETTING_IOCFG2  ,  // IOCFG2: GDO2 signals on RF_RDYn
  SMARTRF_SETTING_IOCFG1  ,  // IOCFG1: GDO1 signals on RSSI_VALID
  SMARTRF_SETTING_IOCFG0  ,  // IOCFG0: GDO0 signals on PA power down signal to control RX/TX switch
  SMARTRF_SETTING_FIFOTHR , // FIFOTHR: RX/TX FIFO Threshold: 33 bytes in TX, 32 bytes in RX
  SMARTRF_SETTING_SYNC1   , // SYNC1: high byte of Sync Word
  SMARTRF_SETTING_SYNC0   , // SYNC0: low byte of Sync Word
  SMARTRF_SETTING_PKTLEN  , // PKTLEN: Packet Length in fixed mode, Maximum Length in variable-length mode
  SMARTRF_SETTING_PKTCTRL1, // PKTCTRL1: No status bytes appended to the packet
  SMARTRF_SETTING_PKTCTRL0, // PKTCTRL0: Fixed-Length Mode, No CRC
  SMARTRF_SETTING_ADDR    , // ADDR: Address for packet filtration
  SMARTRF_SETTING_CHANNR  , // CHANNR: 8-bit channel number, freq = base freq + CHANNR * channel spacing
  SMARTRF_SETTING_FSCTRL1 , // FSCTRL1: Frequency Synthesizer Control (refer to User's Guide/SmartRF Studio)
  SMARTRF_SETTING_FSCTRL0 , // FSCTRL0: Frequency Synthesizer Control (refer to User's Guide/SmartRF Studio)
  SMARTRF_SETTING_FREQ2   , // FREQ2: base frequency, high byte
  SMARTRF_SETTING_FREQ1   , // FREQ1: base frequency, middle byte
  SMARTRF_SETTING_FREQ0   , // FREQ0: base frequency, low byte
  SMARTRF_SETTING_MDMCFG4 , // MDMCFG4: modem configuration (refer to User's Guide/SmartRF Studio)
  SMARTRF_SETTING_MDMCFG3 , // MDMCFG3:                "                      "
  SMARTRF_SETTING_MDMCFG2 , // MDMCFG2:                "                      "
  SMARTRF_SETTING_MDMCFG1 , // MDMCFG1:                "                      "
  SMARTRF_SETTING_MDMCFG0 , // MDMCFG0:                "                      "
  SMARTRF_SETTING_DEVIATN , // DEVIATN: modem deviation setting (refer to User's Guide/SmartRF Studio)
  SMARTRF_SETTING_MCSM2   , // MCSM2: Main Radio Control State Machine Conf. : timeout for sync word search disabled
  SMARTRF_SETTING_MCSM1   , // MCSM1: CCA signals when RSSI below threshold, stay in RX after packet has been received
  SMARTRF_SETTING_MCSM0   , // MCSM0: Auto-calibrate when going from IDLE to RX or TX (or FSTXON )
  SMARTRF_SETTING_FOCCFG  , // FOCCFG: Frequency Offset Compensation Conf.
  SMARTRF_SETTING_BSCFG   , // BSCFG: Bit Synchronization Conf.
  SMARTRF_SETTING_AGCCTRL2, // AGCCTRL2: AGC Control
  SMARTRF_SETTING_AGCCTRL1, // AGCCTRL1:     "
  SMARTRF_SETTING_AGCCTRL0, // AGCCTRL0:     "
  SMARTRF_SETTING_WOREVT1 , // WOREVT1: High Byte Event0 Timeout
  SMARTRF_SETTING_WOREVT0 , // WOREVT0: High Byte Event0 Timeout
  SMARTRF_SETTING_WORCTRL , // WORCTL: Wave On Radio Control ****Feature unavailable in PG0.6****
  SMARTRF_SETTING_FREND1  , // FREND1: Front End RX Conf.
  SMARTRF_SETTING_FREND0  , // FREND0: Front End TX Conf.
  SMARTRF_SETTING_FSCAL3  , // FSCAL3: Frequency Synthesizer Calibration (refer to User's Guide/SmartRF Studio)
  SMARTRF_SETTING_FSCAL2  , // FSCAL2:              "
  SMARTRF_SETTING_FSCAL1  , // FSCAL1:              "
  SMARTRF_SETTING_FSCAL0  , // FSCAL0:              "
  0x00                    , // Reserved *read as 0*
  0x00                    , // Reserved *read as 0*
  SMARTRF_SETTING_FSTEST  , // FSTEST: For test only, irrelevant for normal use case
  SMARTRF_SETTING_PTEST   , // PTEST: For test only, irrelevant for normal use case
  SMARTRF_SETTING_AGCTEST , // AGCTEST: For test only, irrelevant for normal use case
  SMARTRF_SETTING_TEST2   , // TEST2  : For test only, irrelevant for normal use case
  SMARTRF_SETTING_TEST1   , // TEST1  : For test only, irrelevant for normal use case
  SMARTRF_SETTING_TEST0     // TEST0  : For test only, irrelevant for normal use case
};


unsigned int p;
unsigned char packetReceived;
unsigned char packetTransmit;
unsigned char state;
unsigned char duty_cycle = RDC_CARRERSENSE_1;


void TIMER0_A0_INIT(unsigned int);
void TIMER0_A1_INIT(unsigned int);
void TIMER1_A0_INIT(unsigned int);
void TIMER1_A1_INIT(unsigned int);



void main(void)
{

	WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT

	 p = 0;
	 SetVCore(2);

	 PORT_Init();
 	 UCS_Init();
	// LIS3DH_Start();
 	   ResetRadioCore();
 	  WriteBurstReg(IOCFG2, (unsigned char*)RF1A_REGISTER_CONFIG, CONF_REG_SIZE);
 	   WritePATable();

	// TIMER0_A0_INIT(30000);


 	      state = RDC;


 	     TIMER1_A0_INIT(1000);


 	   ///////////////////////////////////////////////////////////////
 	     //   state = TRANS;     //
 	        TA1CCR0 = 0;       //
 	        TA1CCR0 =  INTER_PACKET_INTERVAL ;  //  180 ms






	    __bis_SR_register(GIE);//+
	 //   __bis_SR_register(LPM3);











	  while (1);

	
}

//*******************************************************************************************
//                       TIMER0_A0
//*******************************************************************************************
//Timer0 A0 interrupt service routine
#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMER0_A0_ISR (void)
{
	P3OUT ^= 0x20;
	P3DIR |= 0x20;                             // Add Offset to CCR0
}

//****************************************************************************************
//                       TIMER1_A0
//****************************************************************************************
// Timer1 A0 interrupt service routine
#pragma vector=TIMER1_A0_VECTOR
__interrupt void TIMER1_A0_ISR (void)
{

  switch(state)
   {

     //************************************************************************************
      //////////////////////////////////////////////////////////////////////////////
      /// N O    R E A C I E V E    T H E    P A C K E T  I N   1 S  I N T E R V A L
      //////////////////////////////////////////////////////////////////////////////

       case  END_WAIT_AFTER_CARRERSENSE:



         // state = RDC;

          if( packetReceived == 0)
          {
              //   LED2TOGG;
          }
           else
          {

           //  LED3TOGG;

          }




       break;

 //*****************************************************************************************************************



    //////////////////////////////////////////////////////////////////////////////////////////
    ////   R A D I O         D U T Y     C Y C L E
    /////////////////////////////////////////////////////////////////////////////////////////

     case RDC:

           if(duty_cycle == RDC_CARRERSENSE_1){
                                TA1CCR0 = 100;  // 2.2
                                 duty_cycle = RDC_LITTLE_TIMEOUT ;
                                ResetRadioCore();
                               //  WriteBurstReg_RF1A();
                                 WritePATable();
                                CarrerSenseOn();
                                P3OUT ^= 0x20;
                               	P3DIR |= 0x20;
                               }
      else if (duty_cycle == RDC_LITTLE_TIMEOUT ){
                                 TA1CCR0 = CCA_SLEEP_TIME; // 200
                                  duty_cycle = RDC_CARRERSENSE_2;
                                 CarrerSenseOff();
                                 ResetRadioCore();
                                  P3OUT &= (~0x20);   P3DIR |= 0x20;
                                // __bis_SR_register(GIE);
                               //  __bis_SR_register(LPM3);
                                  __bis_SR_register( GIE);//LPM3_bits +
                                }
      else if (duty_cycle == RDC_CARRERSENSE_2){
                                 TA1CCR0 = 100;  // 2.2
                                 duty_cycle = RDC_BIG_TIMEOUT;
                                  ResetRadioCore();
                                 WriteBurstReg_RF1A();
                                  WritePATable();
                                  CarrerSenseOn();
                                 P3OUT ^= 0x20;
                                 P3DIR |= 0x20;
                                }
      else if (duty_cycle == RDC_BIG_TIMEOUT){
                                 TA1CCR0 = 65535;  // 2.2
                                 duty_cycle = RDC_CARRERSENSE_1;
                                  CarrerSenseOff();
                                  ResetRadioCore();
                                 P3OUT &= (~0x20);   P3DIR |= 0x20;
                               //  __bis_SR_register(GIE);
                               //  __bis_SR_register(LPM3);
                                 __bis_SR_register(LPM3_bits + GIE);
                                }
       break;
     ///////////////////////////////////////////////////////////////////////
     /// T R A N S M I T I N G      P A C K E T
     ///////////////////////////////////////////////////////////////////////
    //********************************************************************************
   /*  case TRANS:

       ResetRadioCore();
       WriteBurstReg_RF1A();
       WritePATable();

       ReceiveOff();
      // CarrerSenseOff();

        // Transmit( (unsigned char*)TxBuffer, sizeof TxBuffer);

       //Wait for TX status to be reached before going back to low power mode
        while((Strobe(RF_SNOP) & 0x70) != 0x20);
        //  LED3TOGG;
        //  LED1TOGG;

      break;*/




       /////////////////////////////////////////////////////////////////////////////

    }
}
//****************************************************************************************
//
//****************************************************************************************

// Timer_A1 Interrupt Vector (TAIV) handler
#pragma vector=TIMER1_A1_VECTOR
__interrupt void TIMER1_A1_ISR(void)
{
  switch(__even_in_range(TA1IV,14))
  {
    case  0: break;                          // No interrupt

    case  2:




    break;                          // CCR1 not used

    case  4:





    break;                          // CCR2 not used

    case  6: break;                          // reserved
    case  8: break;                          // reserved
    case 10: break;                          // reserved
    case 12: break;                          // reserved


  case 14:



  break;

  default: break;
  }
}


//*******************************************************************************************
// Timer_A5 Interrupt Vector (TAIV) handler
#pragma vector=TIMER0_A1_VECTOR
__interrupt void TIMER0_A1_ISR(void)
{
  switch(__even_in_range(TA1IV,14))
  {
    case 0: break;
    case 2:  TA1CCR1 += 16;                 // Add Offset to CCR1
             break;
    case 4:  TA1CCR2 += 100;                // Add Offset to CCR2
             break;
    case 6:  break;                         // CCR3 not used
    case 8:  break;                         // CCR4 not used
    case 10: break;                         // CCR5 not used
    case 12: break;                         // Reserved not used
    case 14: P1OUT ^= 0x01;                 // overflow
             break;
    default: break;
 }

}
//*******************************************************************************************
//*******************************************************************************************

void TIMER0_A0_INIT(unsigned int interval)
{
   TA0CCR0 =  interval;
  TA0CTL = TASSEL_1 + MC_1 + TACLR;// + TAIE;
  TA0CCTL0 = CCIE;


}
void TIMER0_A1_INIT(unsigned int interval)
{



}


void TIMER1_A0_INIT(unsigned int interval)
{
   TA1CCR0 =  interval;
  TA1CTL = TASSEL_1 + MC_1 + TACLR;// + TAIE;
  TA1CCTL0 = CCIE;


}

 void TIMER1_A1_INIT(unsigned int interval)
{




}

