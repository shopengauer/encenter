/*
 * rf1a.h
 *
 *  Created on: 24.06.2013
 *      Author: V.Pavlov
 */

/* ------------------------------------------------------------------------------------------------
 *                                          Defines
 * ------------------------------------------------------------------------------------------------
 */
#include "rf1aSettings.h"
/* Define whether or not to check for RF1AERROR flags during debug */
//#define DEBUG 1              // For debug of error flags ONLY

/* Define frequency of operation by commenting the symbol, SELECT_MHZ_FOR_OPERATION,
 * then uncommenting the appropriate frequency symbol (868 or 915)*/
//#define SELECT_MHZ_FOR_OPERATION  1
#define MHZ_868   1            // Select either 868 or 915MHz
//#define MHZ_915   1

#ifdef SELECT_MHZ_FOR_OPERATION
  #error: "Please define frequency of operation in RF1A.h"
#endif

#define CONF_REG_SIZE    47        /* There are 47 8-bit configuration registers */

#define LED1ON                  P1OUT |= 0x01;          P1DIR |= 0x01;
#define LED1OFF                 P1OUT &= (~0x01);       P1DIR |= 0x01;
#define LED1TOGG                P1OUT ^= 0x01;          P1DIR |= 0x01;


#define LED2ON                  P2OUT |= 0x40;          P2DIR |= 0x40;
#define LED2OFF                 P2OUT &= (~0x40);       P2DIR |= 0x40;
#define LED2TOGG                P2OUT ^= 0x40;          P2DIR |= 0x40;

#define LED3ON                  P3OUT |= 0x02;          P3DIR |= 0x02;
#define LED3OFF                 P3OUT &= (~0x02);       P3DIR |= 0x02;
#define LED3TOGG                P3OUT ^= 0x02;          P3DIR |= 0x02;




unsigned char Strobe(unsigned char strobe);
unsigned char ReadSingleReg(unsigned char addr);
void WriteSingleReg(unsigned char addr, unsigned char value);
void ReadBurstReg(unsigned char addr, unsigned char *buffer, unsigned char count);
void WriteBurstReg(unsigned char addr, unsigned char *buffer, unsigned char count);
void ResetRadioCore (void);
void WritePATable(void);
void Transmit(unsigned char *buffer, unsigned char length);
void ReceiveOn(void);
void ReceiveOff(void);
void WriteSmartRFReg(const unsigned char SmartRFSetting[][2], unsigned char size);
void CarrerSenseOn(void);
void CarrerSenseOff(void);

void WriteBurstReg_RF1A(void);

const unsigned char RF1A_REGISTER_CONFIG[CONF_REG_SIZE]=
{
  SMARTRF_SETTING_IOCFG2  ,  // IOCFG2: GDO2 signals on RF_RDYn
  SMARTRF_SETTING_IOCFG1  ,  // IOCFG1: GDO1 signals on RSSI_VALID
  SMARTRF_SETTING_IOCFG0  ,  // IOCFG0: GDO0 signals on PA power down signal to control RX/TX switch
  SMARTRF_SETTING_FIFOTHR , // FIFOTHR: RX/TX FIFO Threshold: 33 bytes in TX, 32 bytes in RX
  SMARTRF_SETTING_SYNC1   , // SYNC1: high byte of Sync Word
  SMARTRF_SETTING_SYNC0   , // SYNC0: low byte of Sync Word
  SMARTRF_SETTING_PKTLEN  , // PKTLEN: Packet Length in fixed mode, Maximum Length in variable-length mode
  SMARTRF_SETTING_PKTCTRL1, // PKTCTRL1: No status bytes appended to the packet
  SMARTRF_SETTING_PKTCTRL0, // PKTCTRL0: Fixed-Length Mode, No CRC
  SMARTRF_SETTING_ADDR    , // ADDR: Address for packet filtration
  SMARTRF_SETTING_CHANNR  , // CHANNR: 8-bit channel number, freq = base freq + CHANNR * channel spacing
  SMARTRF_SETTING_FSCTRL1 , // FSCTRL1: Frequency Synthesizer Control (refer to User's Guide/SmartRF Studio)
  SMARTRF_SETTING_FSCTRL0 , // FSCTRL0: Frequency Synthesizer Control (refer to User's Guide/SmartRF Studio)
  SMARTRF_SETTING_FREQ2   , // FREQ2: base frequency, high byte
  SMARTRF_SETTING_FREQ1   , // FREQ1: base frequency, middle byte
  SMARTRF_SETTING_FREQ0   , // FREQ0: base frequency, low byte
  SMARTRF_SETTING_MDMCFG4 , // MDMCFG4: modem configuration (refer to User's Guide/SmartRF Studio)
  SMARTRF_SETTING_MDMCFG3 , // MDMCFG3:                "                      "
  SMARTRF_SETTING_MDMCFG2 , // MDMCFG2:                "                      "
  SMARTRF_SETTING_MDMCFG1 , // MDMCFG1:                "                      "
  SMARTRF_SETTING_MDMCFG0 , // MDMCFG0:                "                      "
  SMARTRF_SETTING_DEVIATN , // DEVIATN: modem deviation setting (refer to User's Guide/SmartRF Studio)
  SMARTRF_SETTING_MCSM2   , // MCSM2: Main Radio Control State Machine Conf. : timeout for sync word search disabled
  SMARTRF_SETTING_MCSM1   , // MCSM1: CCA signals when RSSI below threshold, stay in RX after packet has been received
  SMARTRF_SETTING_MCSM0   , // MCSM0: Auto-calibrate when going from IDLE to RX or TX (or FSTXON )
  SMARTRF_SETTING_FOCCFG  , // FOCCFG: Frequency Offset Compensation Conf.
  SMARTRF_SETTING_BSCFG   , // BSCFG: Bit Synchronization Conf.
  SMARTRF_SETTING_AGCCTRL2, // AGCCTRL2: AGC Control
  SMARTRF_SETTING_AGCCTRL1, // AGCCTRL1:     "
  SMARTRF_SETTING_AGCCTRL0, // AGCCTRL0:     "
  SMARTRF_SETTING_WOREVT1 , // WOREVT1: High Byte Event0 Timeout
  SMARTRF_SETTING_WOREVT0 , // WOREVT0: High Byte Event0 Timeout
  SMARTRF_SETTING_WORCTRL , // WORCTL: Wave On Radio Control ****Feature unavailable in PG0.6****
  SMARTRF_SETTING_FREND1  , // FREND1: Front End RX Conf.
  SMARTRF_SETTING_FREND0  , // FREND0: Front End TX Conf.
  SMARTRF_SETTING_FSCAL3  , // FSCAL3: Frequency Synthesizer Calibration (refer to User's Guide/SmartRF Studio)
  SMARTRF_SETTING_FSCAL2  , // FSCAL2:              "
  SMARTRF_SETTING_FSCAL1  , // FSCAL1:              "
  SMARTRF_SETTING_FSCAL0  , // FSCAL0:              "
  0x00                    , // Reserved *read as 0*
  0x00                    , // Reserved *read as 0*
  SMARTRF_SETTING_FSTEST  , // FSTEST: For test only, irrelevant for normal use case
  SMARTRF_SETTING_PTEST   , // PTEST: For test only, irrelevant for normal use case
  SMARTRF_SETTING_AGCTEST , // AGCTEST: For test only, irrelevant for normal use case
  SMARTRF_SETTING_TEST2   , // TEST2  : For test only, irrelevant for normal use case
  SMARTRF_SETTING_TEST1   , // TEST1  : For test only, irrelevant for normal use case
  SMARTRF_SETTING_TEST0     // TEST0  : For test only, irrelevant for normal use case
};


